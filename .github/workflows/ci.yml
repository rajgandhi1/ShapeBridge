name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint and Type Check
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run ruff linter
        run: ruff check src tests

      - name: Run ruff formatter
        run: ruff format --check src tests

      - name: Run mypy type checker
        run: mypy src
        continue-on-error: true  # Don't fail CI on type errors in Phase 0

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.10'

    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests (without OCCT)
        run: pytest -v -m "not occt" --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  test-with-occt:
    runs-on: ubuntu-latest
    name: Test with OCCT (pythonocc-core)
    # Only run on main branch to save CI resources
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglu1-mesa libxrender1 libxext6

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Install pythonocc-core
        run: |
          pip install pythonocc-core
        continue-on-error: true

      - name: Run OCCT tests
        run: pytest -v -m "occt" --tb=short
        continue-on-error: true  # Don't fail if OCCT installation failed

  build:
    runs-on: ubuntu-latest
    name: Build Package
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          pip install twine
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pre-commit:
    runs-on: ubuntu-latest
    name: Pre-commit Hooks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files
        continue-on-error: true  # Don't fail CI on formatting issues

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan
          path: bandit-report.json

  docs:
    runs-on: ubuntu-latest
    name: Documentation Check
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Check docstring style
        run: pydocstyle src/ --convention=google
        continue-on-error: true

      - name: Generate API documentation
        run: |
          pip install pdoc3
          pdoc3 --html --output-dir docs/ src/
        continue-on-error: true

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docs
          path: docs/