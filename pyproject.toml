[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "shapebridge"
version = "0.0.1"
description = "Phase 0: STEP -> IR + MCP tools for CAD geometry processing"
readme = "README.md"
requires-python = ">=3.10"
authors = [{name = "Eicon Vision"}]
license = {text = "Apache-2.0"}
keywords = ["cad", "step", "geometry", "mcp", "opencascade"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Visualization",
]

dependencies = [
    "pydantic>=2.6",
    "typer>=0.12",
    "rich>=13.7",
    "trimesh>=4.4",
    "numpy>=1.26",
    "orjson>=3.10",
    "mcp>=1.2",
    "structlog>=24.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2",
    "pytest-cov>=5.0",
    "pytest-mock>=3.12",
    "ruff>=0.6",
    "black>=24.8",
    "mypy>=1.11",
    "toml-sort>=0.23",
    "pre-commit>=3.7",
]

# Optional OCCT bindings - user must install manually due to platform complexity
occt = [
    # "pyOCCT",           # conda-forge recommended
    # "pythonocc-core",   # pip fallback
]

[project.scripts]
shapebridge = "shapebridge.cli:app"
shapebridge-mcp = "shapebridge_mcp.server:main"

[project.urls]
Homepage = "https://github.com/eicon-vision/shapebridge"
Repository = "https://github.com/eicon-vision/shapebridge.git"
Issues = "https://github.com/eicon-vision/shapebridge/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B011"]

[tool.black]
line-length = 100
target-version = ['py310']

[tool.mypy]
python_version = "3.10"
packages = ["shapebridge", "stepgraph_ir", "kernel", "shapebridge_mcp"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = [
    "trimesh.*",
    "OCCT.*",
    "OCP.*",
    "pythonocc.*",
    "pyOCCT.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "occt: marks tests that require OCCT bindings",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]